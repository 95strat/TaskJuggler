== The TaskJuggler Syntax ==

=== Understanding the Syntax Reference ===

This manual provides a comprehensive reference of the TaskJuggler
syntax. It is automatically generated from the same data that the
parser uses to read your project files. This ensures that the
software and the manual always match.

The syntax reference is organized based on the keywords of the
TaskJuggler syntax. There is an entry for every keyword. In some
cases, a keyword can appear in different contexts with potentially
different meanings. In this case, the context is provided in brackets
after the keyword for at least one of them. That way, every keyword
is uniquely referenced.

The syntax for each keyword is described in the syntax section of the
table that is provided for each keyword. The syntax always starts
with the keyword. Keywords are then followed by arguments.
In some cases, an argument can be automatically generated.  In such
cases, the argument is enclosed in square brackets. 

 keyword [<id>]

Arguments can be variable or picked from a predefined list of options.
Variable arguments are listed with their names enclosed in angle
brackets.

 keyword <name>

List of predefined options are enclosed in brackets, the
options separated by a vertical bar.

 keyword ( foo | bar | foobar )

Variable arguments are further described in the ''Arguments'' section of
the keyword syntax table. The name is listed immediately followed by
the type of the variable argument. The supported types and their
meaning is described in the following sections.

==== ABSOLUTE_ID ====

An absolute identifier is composed of identifiers that are
concatenated by dots, e. g. ''''foo.bar''''. It is used to reference
a TaskJuggler property that lives in a hierarchical name space.
Accounts, Tasks, Reports are examples for such hierarchical name
spaces. To reference the sub-task ''''bar'''' of task ''''foo'''' the
absolute ID ''''foo.bar'''' is used.

==== ID ====

An identifier is composed of the letters ''''a'''' to ''''z'''',
''''A'''' to ''''Z'''', the underscore and the digits ''''0'''' to
''''9''''. There are no limits for the number of characters, but it
may not begin with a digit.

==== INTEGER ====

An integer is any natural number, e. g. ''''0'''', ''''1'''',
''''2'''' and so on.

==== STRING ====

Strings are character sequences that are enclosed by special
character marks. There are three different marks supported. For
short strings that fit on one lines, you can either use single or
double quotes.

 'This is a single quoted string.'
 "This is a double quoted string."

Single quoted strings may contain double quotes and vice versa.

For multi-line strings cut mark strings are recommended. A
cut-mark-string starts with ''''<nowiki>-8<-</nowiki>'''' (scissor on
a dotted line) and ends with ''''->8-''''. The start mark must be
immediately followed by a line break. The indentation of the first
line must be repeated for all following lines of the string and is not
included in the resulting strings. The terminating cut mark must only
be preceeded by white spaces by may not be indented more than the
first line indentation.

 -8<-
   This is a
   multi-line
   string.
   ->8-

=== Predefined Macros ===

TaskJuggler supports a few predefined macros. These are available
after the project header. They values correspond to the values
provided in the project header.

* ''''projectstart'''' The start date of the project.
* ''''projectend'''' The end date of the project.
* ''''now'''' The current date. If the user does not provide a date
with the [[now]] keyword, the moment of the processing of the file
will be inserted. Keep in mind that this will change every time you
process your project. 

=== Logical Expression Functions ===

==== isactive(scenario) ====

Can evaluate to true for tasks and resources if they have bookings in
the scenario during the report time frame.

==== isdependencyof(task, scenario, distance) ====

Can evaluate to true for tasks that depend on the specified task in
the specified scenario and are no more than distance tasks away. If
distance is 0, all dependencies are considered independent of their
distance.

==== isdutyof(resource, scenario) ====

Can evaluate to true for tasks that have the specified resource
assigned to it in the specified scenario.

==== isleaf() ====

Will evaluate to true for all properties that have no child
properties.

==== treelevel() ====

Returns the nesting level of a property in the property tree.
Top level properties have a level of 1, their children 2 and so on.

