#!/usr/bin/env ruby -w
# encoding: UTF-8
#
# = RichText.rb -- The TaskJuggler III Project Management Software
#
# Copyright (c) 2006, 2007, 2008, 2009 by Chris Schlaeger <cs@kde.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#

require 'RichTextElement'
require 'RichTextParser'

class TaskJuggler

  # RichText is a MediaWiki markup parser and HTML generator implemented in
  # pure Ruby. It can also generate plain text versions of the original markup
  # text.  It is based on the TextParser class to implement the
  # RichTextParser. The scanner is implemented in the RichTextScanner class.
  # The read-in text is converted into a tree of RichTextElement objects.
  # These can then be turned into HTML element trees modelled by XMLElement or
  # plain text.
  #
  # This class supports the following mark-ups:
  #
  # The following markups are block commands and must start at the beginning of
  # the line.
  #
  #  == Headline 1 ==
  #  === Headline 2 ===
  #  ==== Headline 3 ====
  #
  #  ---- creates a horizontal line
  #
  #  * Bullet 1
  #  ** Bullet 2
  #  *** Bullet 3
  #
  #  # Enumeration Level 1
  #  ## Enumeration Level 2
  #  ### Enumeration Level 3
  #
  #   Preformatted text start with
  #   a single space at the start of
  #   each line.
  #
  #
  # The following are in-line mark-ups and can occur within any text block
  #
  #  This is an ''italic'' word.
  #  This is a '''bold''' word.
  #  This is a ''''monospaced'''' word. This is not part of the original
  #  MediaWiki markup, but we needed monospaced as well.
  #  This is a '''''italic and bold''''' word.
  #
  # Linebreaks are ignored if not followed by a blank line.
  #
  #  [http://www.taskjuggler.org] A web link
  #  [http://www.taskjuggler.org The TaskJuggler Web Site] another link
  #
  #  [[item]] site internal internal reference (in HTML .html gets appended
  #                                             automatically)
  #  [[item An item]] another internal reference
  #  [[function:path arg1 arg2 ...]]
  #
  #  <nowiki> ... </nowiki> Disable markup interpretation for the enclosed
  #  portion of text.
  #
  class RichText

    attr_accessor :text


    # Create a rich text object by passing a String with markup elements to it.
    # _text_ must be plain text with MediaWiki compatible markup elements. In
    # case an error occurs, an exception of type TjException will be raised.
    def initialize(text)
      # Keep a copy of the original text.
      @inputText = text
    end

    def generateIntermediateFormat(sectionCounter = [ 0, 0, 0])
      rti = RichTextIntermediate.new(self)
      parser = RichTextParser.new(rti, sectionCounter)
      parser.open(@inputText)
      # Parse the input text and convert it to the intermediate representation.
      tree = parser.parse('richtext')
      # In case the result is empty, use an empty RichTextElement as result
      tree = RichTextElement.new(rti, :richtext, nil) unless tree
      tree.cleanUp
      rti.tree = tree
      rti
    end

  end

  # The RichTextIntermediate is a container for the intermediate
  # representation of a RichText object. By calling the to_* members it can be
  # converted into the respective formats. A RichTextIntermediate object is
  # generated by RichText::generateIntermediateFormat.
  class RichTextIntermediate

    attr_accessor :sectionNumbers, :lineWidth, :tree

    def initialize(richText)
      # A reference to the corresponding RichText object the RTI is derived
      # from.
      @richText = richText
      # The root of the generated intermediate format. This is a
      # RichTextElement.
      @tree = nil
      # Set this to false to disable automatically generated section numbers.
      @sectionNumbers = true
      # Set this to the width of your text area. Needed for horizonal lines.
      @lineWidth = 80
      # These are the RichTextFunctionHandler objects to handle references with
      # a function specification.
      @functionHandlers = {}
    end

    # Use this function to register new RichTextFunctionHandler objects with
    # this class.
    def registerFunction(functionHandler)
      @functionHandlers[functionHandler.function] = functionHandler
    end

    # Use this function to register a set of RichTextFunctionHandler objects
    # with this class. This will replace any previously registered handlers.
    def setProtocolHandlers(functionHandlers)
      @functionHandlers = functionHandlers
    end

    # Return the handler for the given _function_ or raise an exception if it
    # does not exist.
    def functionHandler(function)
      @functionHandlers[function]
    end

    # Convert the intermediate format into a plain text String object.
    def to_s
      @tree.to_s
    end

    # Convert the intermediate format into a XMLElement objects tree.
    def to_html
      @tree.to_html
    end

    # Convert the intermediate format into a tagged syntax String object.
    def to_tagged
      @tree.to_tagged
    end

  end

end

